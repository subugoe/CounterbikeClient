<?php
/**
 * Tracking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Subugoe\CounterClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 5
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Subugoe\CounterClient\Model;

use \ArrayAccess;
use \Subugoe\CounterClient\ObjectSerializer;

/**
 * Tracking Class Doc Comment
 *
 * @category Class
 * @description
 * @package  Subugoe\CounterClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Tracking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'customerId' => 'customerId',
        'institutionName' => 'institutionName',
        'institutionId' => 'institutionId',
        'clientIP' => 'clientIP',
        'userAgent' => 'userAgent',
        'platform' => 'platform',
        'docDatabase' => 'docDatabase',
        'trackingEvent' => 'trackingEvent',
        'documentId' => 'documentId',
        'parentId' => 'parentId',
        'documentUrl' => 'documentUrl',
        'documentTitle' => 'documentTitle',
        'parentTitle' => 'parentTitle',
        'chapter' => 'chapter',
        'author' => 'author',
        'publisher' => 'publisher',
        'publisherId' => 'publisherId',
        'issnPrint' => 'issnPrint',
        'issnOnline' => 'issnOnline',
        'isbn' => 'isbn',
        'isan' => 'isan',
        'ismn' => 'ismn',
        'isrc' => 'isrc',
        'istc' => 'istc',
        'doi' => 'doi',
        'proprietaryId' => 'proprietaryId',
        'accessMethod' => 'accessMethod',
        'accessType' => 'accessType',
        'dataType' => 'dataType',
        'sectionType' => 'sectionType',
        'yop' => 'yop',
        'sessionId' => 'sessionId',
        'created' => 'created',
        'trackingDate' => 'trackingDate'
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'customerId' => 'getCustomerId',
        'institutionName' => 'getInstitutionName',
        'institutionId' => 'getInstitutionId',
        'clientIP' => 'getClientIP',
        'userAgent' => 'getUserAgent',
        'platform' => 'getPlatform',
        'docDatabase' => 'getDocDatabase',
        'trackingEvent' => 'getTrackingEvent',
        'documentId' => 'getDocumentId',
        'parentId' => 'getParentId',
        'documentUrl' => 'getDocumentUrl',
        'documentTitle' => 'getDocumentTitle',
        'parentTitle' => 'getParentTitle',
        'chapter' => 'getChapter',
        'author' => 'getAuthor',
        'publisher' => 'getPublisher',
        'publisherId' => 'getPublisherId',
        'issnPrint' => 'getIssnPrint',
        'issnOnline' => 'getIssnOnline',
        'isbn' => 'getIsbn',
        'isan' => 'getIsan',
        'ismn' => 'getIsmn',
        'isrc' => 'getIsrc',
        'istc' => 'getIstc',
        'doi' => 'getDoi',
        'proprietaryId' => 'getProprietaryId',
        'accessMethod' => 'getAccessMethod',
        'accessType' => 'getAccessType',
        'dataType' => 'getDataType',
        'sectionType' => 'getSectionType',
        'yop' => 'getYop',
        'sessionId' => 'getSessionId',
        'created' => 'getCreated',
        'trackingDate' => 'getTrackingDate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'customerId' => null,
        'institutionName' => null,
        'institutionId' => null,
        'clientIP' => null,
        'userAgent' => null,
        'platform' => null,
        'docDatabase' => null,
        'trackingEvent' => null,
        'documentId' => null,
        'parentId' => null,
        'documentUrl' => null,
        'documentTitle' => null,
        'parentTitle' => null,
        'chapter' => null,
        'author' => null,
        'publisher' => null,
        'publisherId' => null,
        'issnPrint' => null,
        'issnOnline' => null,
        'isbn' => null,
        'isan' => null,
        'ismn' => null,
        'isrc' => null,
        'istc' => null,
        'doi' => null,
        'proprietaryId' => null,
        'accessMethod' => null,
        'accessType' => null,
        'dataType' => null,
        'sectionType' => null,
        'yop' => null,
        'sessionId' => null,
        'created' => null,
        'trackingDate' => 'date-time'
    ];

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Tracking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'customerId' => 'string',
        'institutionName' => 'string',
        'institutionId' => 'string',
        'clientIP' => 'string',
        'userAgent' => 'string',
        'platform' => 'string',
        'docDatabase' => 'string',
        'trackingEvent' => 'string',
        'documentId' => 'string',
        'parentId' => 'string',
        'documentUrl' => 'string',
        'documentTitle' => 'string',
        'parentTitle' => 'string',
        'chapter' => 'string',
        'author' => 'string',
        'publisher' => 'string',
        'publisherId' => 'string',
        'issnPrint' => 'string',
        'issnOnline' => 'string',
        'isbn' => 'string',
        'isan' => 'string',
        'ismn' => 'string',
        'isrc' => 'string',
        'istc' => 'string',
        'doi' => 'string',
        'proprietaryId' => 'string',
        'accessMethod' => 'string',
        'accessType' => 'string',
        'dataType' => 'string',
        'sectionType' => 'string',
        'yop' => 'string',
        'sessionId' => 'string',
        'created' => 'int',
        'trackingDate' => '\DateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'customerId' => 'setCustomerId',
        'institutionName' => 'setInstitutionName',
        'institutionId' => 'setInstitutionId',
        'clientIP' => 'setClientIP',
        'userAgent' => 'setUserAgent',
        'platform' => 'setPlatform',
        'docDatabase' => 'setDocDatabase',
        'trackingEvent' => 'setTrackingEvent',
        'documentId' => 'setDocumentId',
        'parentId' => 'setParentId',
        'documentUrl' => 'setDocumentUrl',
        'documentTitle' => 'setDocumentTitle',
        'parentTitle' => 'setParentTitle',
        'chapter' => 'setChapter',
        'author' => 'setAuthor',
        'publisher' => 'setPublisher',
        'publisherId' => 'setPublisherId',
        'issnPrint' => 'setIssnPrint',
        'issnOnline' => 'setIssnOnline',
        'isbn' => 'setIsbn',
        'isan' => 'setIsan',
        'ismn' => 'setIsmn',
        'isrc' => 'setIsrc',
        'istc' => 'setIstc',
        'doi' => 'setDoi',
        'proprietaryId' => 'setProprietaryId',
        'accessMethod' => 'setAccessMethod',
        'accessType' => 'setAccessType',
        'dataType' => 'setDataType',
        'sectionType' => 'setSectionType',
        'yop' => 'setYop',
        'sessionId' => 'setSessionId',
        'created' => 'setCreated',
        'trackingDate' => 'setTrackingDate'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['institutionName'] = isset($data['institutionName']) ? $data['institutionName'] : null;
        $this->container['institutionId'] = isset($data['institutionId']) ? $data['institutionId'] : null;
        $this->container['clientIP'] = isset($data['clientIP']) ? $data['clientIP'] : null;
        $this->container['userAgent'] = isset($data['userAgent']) ? $data['userAgent'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['docDatabase'] = isset($data['docDatabase']) ? $data['docDatabase'] : null;
        $this->container['trackingEvent'] = isset($data['trackingEvent']) ? $data['trackingEvent'] : null;
        $this->container['documentId'] = isset($data['documentId']) ? $data['documentId'] : null;
        $this->container['parentId'] = $data['parentId'] ?? null;
        $this->container['documentUrl'] = $data['documentUrl'] ?? null;
        $this->container['documentTitle'] = isset($data['documentTitle']) ? $data['documentTitle'] : null;
        $this->container['parentTitle'] = isset($data['parentTitle']) ? $data['parentTitle'] : null;
        $this->container['chapter'] = isset($data['chapter']) ? $data['chapter'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['publisher'] = isset($data['publisher']) ? $data['publisher'] : null;
        $this->container['publisherId'] = isset($data['publisherId']) ? $data['publisherId'] : null;
        $this->container['issnPrint'] = isset($data['issnPrint']) ? $data['issnPrint'] : null;
        $this->container['issnOnline'] = isset($data['issnOnline']) ? $data['issnOnline'] : null;
        $this->container['isbn'] = isset($data['isbn']) ? $data['isbn'] : null;
        $this->container['isan'] = isset($data['isan']) ? $data['isan'] : null;
        $this->container['ismn'] = isset($data['ismn']) ? $data['ismn'] : null;
        $this->container['isrc'] = isset($data['isrc']) ? $data['isrc'] : null;
        $this->container['istc'] = isset($data['istc']) ? $data['istc'] : null;
        $this->container['doi'] = isset($data['doi']) ? $data['doi'] : null;
        $this->container['proprietaryId'] = isset($data['proprietaryId']) ? $data['proprietaryId'] : null;
        $this->container['accessMethod'] = isset($data['accessMethod']) ? $data['accessMethod'] : null;
        $this->container['accessType'] = isset($data['accessType']) ? $data['accessType'] : null;
        $this->container['dataType'] = isset($data['dataType']) ? $data['dataType'] : null;
        $this->container['sectionType'] = isset($data['sectionType']) ? $data['sectionType'] : null;
        $this->container['yop'] = isset($data['yop']) ? $data['yop'] : null;
        $this->container['sessionId'] = isset($data['sessionId']) ? $data['sessionId'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['trackingDate'] = isset($data['trackingDate']) ? $data['trackingDate'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @throws \JsonException
     * @return string
     */
    public function __toString(): string
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Gets accessMethod
     *
     * @return string|null
     */
    public function getAccessMethod(): ?string
    {
        return $this->container['accessMethod'];
    }

    /**
     * Gets accessType
     *
     * @return string|null
     */
    public function getAccessType(): ?string
    {
        return $this->container['accessType'];
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor(): ?string
    {
        return $this->container['author'];
    }

    /**
     * Gets chapter
     *
     * @return string|null
     */
    public function getChapter(): ?string
    {
        return $this->container['chapter'];
    }

    /**
     * Gets clientIP
     *
     * @return string|null
     */
    public function getClientIP(): ?string
    {
        return $this->container['clientIP'];
    }

    /**
     * Gets created
     */
    public function getCreated(): int
    {
        return $this->container['created'];
    }

    /**
     * Gets customerId
     *
     * @return string|null
     */
    public function getCustomerId(): ?string
    {
        return $this->container['customerId'];
    }

    /**
     * Gets dataType
     *
     * @return string|null
     */
    public function getDataType(): ?string
    {
        return $this->container['dataType'];
    }

    /**
     * Gets docDatabase
     *
     * @return string|null
     */
    public function getDocDatabase(): ?string
    {
        return $this->container['docDatabase'];
    }

    /**
     * Gets documentId
     *
     * @return string|null
     */
    public function getDocumentId(): ?string
    {
        return $this->container['documentId'];
    }

    /**
     * Gets documentTitle
     *
     * @return string|null
     */
    public function getDocumentTitle(): ?string
    {
        return $this->container['documentTitle'];
    }

    /**
     * Gets documentUrl
     *
     * @return string|null
     */
    public function getDocumentUrl(): ?string
    {
        return $this->container['documentUrl'];
    }

    /**
     * Gets doi
     *
     * @return string|null
     */
    public function getDoi(): ?string
    {
        return $this->container['doi'];
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Gets institutionId
     *
     * @return string|null
     */
    public function getInstitutionId(): ?string
    {
        return $this->container['institutionId'];
    }

    /**
     * Gets institutionName
     *
     * @return string|null
     */
    public function getInstitutionName(): ?string
    {
        return $this->container['institutionName'];
    }

    /**
     * Gets isan
     *
     * @return string|null
     */
    public function getIsan(): ?string
    {
        return $this->container['isan'];
    }

    /**
     * Gets isbn
     *
     * @return string|null
     */
    public function getIsbn(): ?string
    {
        return $this->container['isbn'];
    }

    /**
     * Gets ismn
     *
     * @return string|null
     */
    public function getIsmn(): ?string
    {
        return $this->container['ismn'];
    }

    /**
     * Gets isrc
     *
     * @return string|null
     */
    public function getIsrc(): ?string
    {
        return $this->container['isrc'];
    }

    /**
     * Gets issnOnline
     *
     * @return string|null
     */
    public function getIssnOnline(): ?string
    {
        return $this->container['issnOnline'];
    }

    /**
     * Gets issnPrint
     *
     * @return string|null
     */
    public function getIssnPrint(): ?string
    {
        return $this->container['issnPrint'];
    }

    /**
     * Gets istc
     *
     * @return string|null
     */
    public function getIstc(): ?string
    {
        return $this->container['istc'];
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets parentId
     *
     * @return string|null
     */
    public function getParentId(): ?string
    {
        return $this->container['parentId'];
    }

    /**
     * Gets parentTitle
     *
     * @return string|null
     */
    public function getParentTitle(): ?string
    {
        return $this->container['parentTitle'];
    }

    /**
     * Gets platform
     */
    public function getPlatform(): string
    {
        return $this->container['platform'];
    }

    /**
     * Gets proprietaryId
     *
     * @return string|null
     */
    public function getProprietaryId(): ?string
    {
        return $this->container['proprietaryId'];
    }

    /**
     * Gets publisher
     *
     * @return string|null
     */
    public function getPublisher(): ?string
    {
        return $this->container['publisher'];
    }

    /**
     * Gets publisherId
     *
     * @return string|null
     */
    public function getPublisherId(): ?string
    {
        return $this->container['publisherId'];
    }

    /**
     * Gets sectionType
     *
     * @return string|null
     */
    public function getSectionType(): ?string
    {
        return $this->container['sectionType'];
    }

    /**
     * Gets sessionId
     */
    public function getSessionId(): string
    {
        return $this->container['sessionId'];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * Gets trackingDate
     *
     * @return \DateTime|null
     */
    public function getTrackingDate(): ?\DateTime
    {
        return $this->container['trackingDate'];
    }

    /**
     * Gets trackingEvent
     */
    public function getTrackingEvent(): string
    {
        return $this->container['trackingEvent'];
    }

    /**
     * Gets userAgent
     */
    public function getUserAgent(): string
    {
        return $this->container['userAgent'];
    }

    /**
     * Gets yop
     *
     * @return string|null
     */
    public function getYop(): ?string
    {
        return $this->container['yop'];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['userAgent'] === null) {
            $invalidProperties[] = "'userAgent' can't be null";
        }
        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        if ($this->container['trackingEvent'] === null) {
            $invalidProperties[] = "'trackingEvent' can't be null";
        }
        if ($this->container['sessionId'] === null) {
            $invalidProperties[] = "'sessionId' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        return $invalidProperties;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Sets accessMethod
     *
     * @param string|null $accessMethod accessMethod
     *
     * @return $this
     */
    public function setAccessMethod(?string $accessMethod): self
    {
        $this->container['accessMethod'] = $accessMethod;

        return $this;
    }

    /**
     * Sets accessType
     *
     * @param string|null $accessType accessType
     *
     * @return $this
     */
    public function setAccessType(?string $accessType): self
    {
        $this->container['accessType'] = $accessType;

        return $this;
    }

    /**
     * Sets author
     *
     * @param string|null $author author
     *
     * @return $this
     */
    public function setAuthor(?string $author): self
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Sets chapter
     *
     * @param string|null $chapter chapter
     *
     * @return $this
     */
    public function setChapter(?string $chapter): self
    {
        $this->container['chapter'] = $chapter;

        return $this;
    }

    /**
     * Sets clientIP
     *
     * @param string|null $clientIP clientIP
     *
     * @return $this
     */
    public function setClientIP(?string $clientIP): self
    {
        $this->container['clientIP'] = $clientIP;

        return $this;
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return $this
     */
    public function setCreated(int $created): self
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Sets customerId
     *
     * @param string|null $customerId Customer Id.
     *
     * @return $this
     */
    public function setCustomerId(?string $customerId): self
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Sets dataType
     *
     * @param string|null $dataType dataType
     *
     * @return $this
     */
    public function setDataType(?string $dataType): self
    {
        $this->container['dataType'] = $dataType;

        return $this;
    }

    /**
     * Sets docDatabase
     *
     * @param string|null $docDatabase docDatabase
     *
     * @return $this
     */
    public function setDocDatabase(?string $docDatabase): self
    {
        $this->container['docDatabase'] = $docDatabase;

        return $this;
    }

    /**
     * Sets documentId
     *
     * @param string|null $documentId documentId
     *
     * @return $this
     */
    public function setDocumentId(?string $documentId): self
    {
        $this->container['documentId'] = $documentId;

        return $this;
    }

    /**
     * Sets documentTitle
     *
     * @param string|null $documentTitle documentTitle
     *
     * @return $this
     */
    public function setDocumentTitle(?string $documentTitle): self
    {
        $this->container['documentTitle'] = $documentTitle;

        return $this;
    }

    /**
     * Sets documentUrl
     *
     * @param string|null $documentUrl documentUrl
     *
     * @return $this
     */
    public function setDocumentUrl(?string $documentUrl): self
    {
        $this->container['documentUrl'] = $documentUrl;

        return $this;
    }

    /**
     * Sets doi
     *
     * @param string|null $doi Digital Object Identifier.
     *
     * @return $this
     */
    public function setDoi(?string $doi): self
    {
        $this->container['doi'] = $doi;

        return $this;
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Sets institutionId
     *
     * @param string|null $institutionId Institution Id.
     *
     * @return $this
     */
    public function setInstitutionId(?string $institutionId): self
    {
        $this->container['institutionId'] = $institutionId;

        return $this;
    }

    /**
     * Sets institutionName
     *
     * @param string|null $institutionName Institution Name.
     *
     * @return $this
     */
    public function setInstitutionName(?string $institutionName): self
    {
        $this->container['institutionName'] = $institutionName;

        return $this;
    }

    /**
     * Sets isan
     *
     * @param string|null $isan International Standard Audiovisual Number.
     *
     * @return $this
     */
    public function setIsan(?string $isan): self
    {
        $this->container['isan'] = $isan;

        return $this;
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn International Standard Book Number.
     *
     * @return $this
     */
    public function setIsbn(?string $isbn): self
    {
        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Sets ismn
     *
     * @param string|null $ismn International Standard Music Number.
     *
     * @return $this
     */
    public function setIsmn(?string $ismn): self
    {
        $this->container['ismn'] = $ismn;

        return $this;
    }

    /**
     * Sets isrc
     *
     * @param string|null $isrc The International Standard Recording Code.
     *
     * @return $this
     */
    public function setIsrc(?string $isrc): self
    {
        $this->container['isrc'] = $isrc;

        return $this;
    }

    /**
     * Sets issnOnline
     *
     * @param string|null $issnOnline Online International Standard Serial Number.
     *
     * @return $this
     */
    public function setIssnOnline(?string $issnOnline): self
    {
        $this->container['issnOnline'] = $issnOnline;

        return $this;
    }

    /**
     * Sets issnPrint
     *
     * @param string|null $issnPrint Print International Standard Serial Number.
     *
     * @return $this
     */
    public function setIssnPrint(?string $issnPrint): self
    {
        $this->container['issnPrint'] = $issnPrint;

        return $this;
    }

    /**
     * Sets istc
     *
     * @param string|null $istc International Standard Text Code.
     *
     * @return $this
     */
    public function setIstc(?string $istc): self
    {
        $this->container['istc'] = $istc;

        return $this;
    }

    /**
     * Sets parentId
     *
     * @param string|null $parentId parentId
     *
     * @return $this
     */
    public function setParentId(?string $parentId): self
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Sets parentTitle
     *
     * @param string|null $parentTitle parentTitle
     *
     * @return $this
     */
    public function setParentTitle(?string $parentTitle): self
    {
        $this->container['parentTitle'] = $parentTitle;

        return $this;
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform(string $platform): self
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Sets proprietaryId
     *
     * @param string|null $proprietaryId proprietaryId
     *
     * @return $this
     */
    public function setProprietaryId(?string $proprietaryId): self
    {
        $this->container['proprietaryId'] = $proprietaryId;

        return $this;
    }

    /**
     * Sets publisher
     *
     * @param string|null $publisher publisher
     *
     * @return $this
     */
    public function setPublisher(?string $publisher): self
    {
        $this->container['publisher'] = $publisher;

        return $this;
    }

    /**
     * Sets publisherId
     *
     * @param string|null $publisherId Publisher Id.
     *
     * @return $this
     */
    public function setPublisherId(?string $publisherId): self
    {
        $this->container['publisherId'] = $publisherId;

        return $this;
    }

    /**
     * Sets sectionType
     *
     * @param string|null $sectionType sectionType
     *
     * @return $this
     */
    public function setSectionType(?string $sectionType): self
    {
        $this->container['sectionType'] = $sectionType;

        return $this;
    }

    /**
     * Sets sessionId
     *
     * @param string $sessionId sessionId
     *
     * @return $this
     */
    public function setSessionId(string $sessionId): self
    {
        $this->container['sessionId'] = $sessionId;

        return $this;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Sets trackingDate
     *
     * @param \DateTime|\DateTimeImmutable $trackingDate trackingDate
     *
     * @return $this
     */
    public function setTrackingDate(\DateTimeInterface $trackingDate): self
    {
        $this->container['trackingDate'] = $trackingDate;

        return $this;
    }

    /**
     * Sets trackingEvent
     *
     * @param string $trackingEvent trackingEvent
     *
     * @return $this
     */
    public function setTrackingEvent(string $trackingEvent): self
    {
        $this->container['trackingEvent'] = $trackingEvent;

        return $this;
    }

    /**
     * Sets userAgent
     *
     * @param string $userAgent userAgent
     *
     * @return $this
     */
    public function setUserAgent(string $userAgent): self
    {
        $this->container['userAgent'] = $userAgent;

        return $this;
    }

    /**
     * Sets yop
     *
     * @param string|null $yop yop
     *
     * @return $this
     */
    public function setYop(?string $yop): self
    {
        $this->container['yop'] = $yop;

        return $this;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }
}
