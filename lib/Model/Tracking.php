<?php
/**
 * Tracking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Subugoe\CounterClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Subugoe\CounterClient\Model;

use \ArrayAccess;
use \Subugoe\CounterClient\ObjectSerializer;

/**
 * Tracking Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Subugoe\CounterClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Tracking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tracking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'customerId' => 'string',
        'clientIP' => 'string',
        'platform' => 'string',
        'docDatabase' => 'string',
        'trackingEvent' => 'string',
        'trackingDate' => '\DateTime',
        'documentId' => 'string',
        'documentUrl' => 'string',
        'documentTitle' => 'string',
        'chapter' => 'string',
        'author' => 'string',
        'publisher' => 'string',
        'accessMethod' => 'string',
        'accessType' => 'string',
        'dataType' => 'string',
        'sectionType' => 'string',
        'reportType' => 'string',
        'yop' => 'string',
        'sessionId' => 'string',
        'created' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'customerId' => null,
        'clientIP' => null,
        'platform' => null,
        'docDatabase' => null,
        'trackingEvent' => null,
        'trackingDate' => 'date-time',
        'documentId' => null,
        'documentUrl' => null,
        'documentTitle' => null,
        'chapter' => null,
        'author' => null,
        'publisher' => null,
        'accessMethod' => null,
        'accessType' => null,
        'dataType' => null,
        'sectionType' => null,
        'reportType' => null,
        'yop' => null,
        'sessionId' => null,
        'created' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customerId' => 'customerId',
        'clientIP' => 'clientIP',
        'platform' => 'platform',
        'docDatabase' => 'docDatabase',
        'trackingEvent' => 'trackingEvent',
        'trackingDate' => 'trackingDate',
        'documentId' => 'documentId',
        'documentUrl' => 'documentUrl',
        'documentTitle' => 'documentTitle',
        'chapter' => 'chapter',
        'author' => 'author',
        'publisher' => 'publisher',
        'accessMethod' => 'accessMethod',
        'accessType' => 'accessType',
        'dataType' => 'dataType',
        'sectionType' => 'sectionType',
        'reportType' => 'reportType',
        'yop' => 'yop',
        'sessionId' => 'sessionId',
        'created' => 'created'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customerId' => 'setCustomerId',
        'clientIP' => 'setClientIP',
        'platform' => 'setPlatform',
        'docDatabase' => 'setDocDatabase',
        'trackingEvent' => 'setTrackingEvent',
        'trackingDate' => 'setTrackingDate',
        'documentId' => 'setDocumentId',
        'documentUrl' => 'setDocumentUrl',
        'documentTitle' => 'setDocumentTitle',
        'chapter' => 'setChapter',
        'author' => 'setAuthor',
        'publisher' => 'setPublisher',
        'accessMethod' => 'setAccessMethod',
        'accessType' => 'setAccessType',
        'dataType' => 'setDataType',
        'sectionType' => 'setSectionType',
        'reportType' => 'setReportType',
        'yop' => 'setYop',
        'sessionId' => 'setSessionId',
        'created' => 'setCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customerId' => 'getCustomerId',
        'clientIP' => 'getClientIP',
        'platform' => 'getPlatform',
        'docDatabase' => 'getDocDatabase',
        'trackingEvent' => 'getTrackingEvent',
        'trackingDate' => 'getTrackingDate',
        'documentId' => 'getDocumentId',
        'documentUrl' => 'getDocumentUrl',
        'documentTitle' => 'getDocumentTitle',
        'chapter' => 'getChapter',
        'author' => 'getAuthor',
        'publisher' => 'getPublisher',
        'accessMethod' => 'getAccessMethod',
        'accessType' => 'getAccessType',
        'dataType' => 'getDataType',
        'sectionType' => 'getSectionType',
        'reportType' => 'getReportType',
        'yop' => 'getYop',
        'sessionId' => 'getSessionId',
        'created' => 'getCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['clientIP'] = isset($data['clientIP']) ? $data['clientIP'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['docDatabase'] = isset($data['docDatabase']) ? $data['docDatabase'] : null;
        $this->container['trackingEvent'] = isset($data['trackingEvent']) ? $data['trackingEvent'] : null;
        $this->container['trackingDate'] = isset($data['trackingDate']) ? $data['trackingDate'] : null;
        $this->container['documentId'] = isset($data['documentId']) ? $data['documentId'] : null;
        $this->container['documentUrl'] = isset($data['documentUrl']) ? $data['documentUrl'] : null;
        $this->container['documentTitle'] = isset($data['documentTitle']) ? $data['documentTitle'] : null;
        $this->container['chapter'] = isset($data['chapter']) ? $data['chapter'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['publisher'] = isset($data['publisher']) ? $data['publisher'] : null;
        $this->container['accessMethod'] = isset($data['accessMethod']) ? $data['accessMethod'] : null;
        $this->container['accessType'] = isset($data['accessType']) ? $data['accessType'] : null;
        $this->container['dataType'] = isset($data['dataType']) ? $data['dataType'] : null;
        $this->container['sectionType'] = isset($data['sectionType']) ? $data['sectionType'] : null;
        $this->container['reportType'] = isset($data['reportType']) ? $data['reportType'] : null;
        $this->container['yop'] = isset($data['yop']) ? $data['yop'] : null;
        $this->container['sessionId'] = isset($data['sessionId']) ? $data['sessionId'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customerId'] === null) {
            $invalidProperties[] = "'customerId' can't be null";
        }
        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        if ($this->container['trackingEvent'] === null) {
            $invalidProperties[] = "'trackingEvent' can't be null";
        }
        if ($this->container['documentId'] === null) {
            $invalidProperties[] = "'documentId' can't be null";
        }
        if ($this->container['documentUrl'] === null) {
            $invalidProperties[] = "'documentUrl' can't be null";
        }
        if ($this->container['documentTitle'] === null) {
            $invalidProperties[] = "'documentTitle' can't be null";
        }
        if ($this->container['sessionId'] === null) {
            $invalidProperties[] = "'sessionId' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string $customerId customerId
     *
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets clientIP
     *
     * @return string|null
     */
    public function getClientIP()
    {
        return $this->container['clientIP'];
    }

    /**
     * Sets clientIP
     *
     * @param string|null $clientIP clientIP
     *
     * @return $this
     */
    public function setClientIP($clientIP)
    {
        $this->container['clientIP'] = $clientIP;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets docDatabase
     *
     * @return string|null
     */
    public function getDocDatabase()
    {
        return $this->container['docDatabase'];
    }

    /**
     * Sets docDatabase
     *
     * @param string|null $docDatabase docDatabase
     *
     * @return $this
     */
    public function setDocDatabase($docDatabase)
    {
        $this->container['docDatabase'] = $docDatabase;

        return $this;
    }

    /**
     * Gets trackingEvent
     *
     * @return string
     */
    public function getTrackingEvent()
    {
        return $this->container['trackingEvent'];
    }

    /**
     * Sets trackingEvent
     *
     * @param string $trackingEvent trackingEvent
     *
     * @return $this
     */
    public function setTrackingEvent($trackingEvent)
    {
        $this->container['trackingEvent'] = $trackingEvent;

        return $this;
    }

    /**
     * Gets trackingDate
     *
     * @return \DateTime|null
     */
    public function getTrackingDate()
    {
        return $this->container['trackingDate'];
    }

    /**
     * Sets trackingDate
     *
     * @param \DateTime|null $trackingDate trackingDate
     *
     * @return $this
     */
    public function setTrackingDate($trackingDate)
    {
        $this->container['trackingDate'] = $trackingDate;

        return $this;
    }

    /**
     * Gets documentId
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['documentId'];
    }

    /**
     * Sets documentId
     *
     * @param string $documentId documentId
     *
     * @return $this
     */
    public function setDocumentId($documentId)
    {
        $this->container['documentId'] = $documentId;

        return $this;
    }

    /**
     * Gets documentUrl
     *
     * @return string
     */
    public function getDocumentUrl()
    {
        return $this->container['documentUrl'];
    }

    /**
     * Sets documentUrl
     *
     * @param string $documentUrl documentUrl
     *
     * @return $this
     */
    public function setDocumentUrl($documentUrl)
    {
        $this->container['documentUrl'] = $documentUrl;

        return $this;
    }

    /**
     * Gets documentTitle
     *
     * @return string
     */
    public function getDocumentTitle()
    {
        return $this->container['documentTitle'];
    }

    /**
     * Sets documentTitle
     *
     * @param string $documentTitle documentTitle
     *
     * @return $this
     */
    public function setDocumentTitle($documentTitle)
    {
        $this->container['documentTitle'] = $documentTitle;

        return $this;
    }

    /**
     * Gets chapter
     *
     * @return string|null
     */
    public function getChapter()
    {
        return $this->container['chapter'];
    }

    /**
     * Sets chapter
     *
     * @param string|null $chapter chapter
     *
     * @return $this
     */
    public function setChapter($chapter)
    {
        $this->container['chapter'] = $chapter;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets publisher
     *
     * @return string|null
     */
    public function getPublisher()
    {
        return $this->container['publisher'];
    }

    /**
     * Sets publisher
     *
     * @param string|null $publisher publisher
     *
     * @return $this
     */
    public function setPublisher($publisher)
    {
        $this->container['publisher'] = $publisher;

        return $this;
    }

    /**
     * Gets accessMethod
     *
     * @return string|null
     */
    public function getAccessMethod()
    {
        return $this->container['accessMethod'];
    }

    /**
     * Sets accessMethod
     *
     * @param string|null $accessMethod accessMethod
     *
     * @return $this
     */
    public function setAccessMethod($accessMethod)
    {
        $this->container['accessMethod'] = $accessMethod;

        return $this;
    }

    /**
     * Gets accessType
     *
     * @return string|null
     */
    public function getAccessType()
    {
        return $this->container['accessType'];
    }

    /**
     * Sets accessType
     *
     * @param string|null $accessType accessType
     *
     * @return $this
     */
    public function setAccessType($accessType)
    {
        $this->container['accessType'] = $accessType;

        return $this;
    }

    /**
     * Gets dataType
     *
     * @return string|null
     */
    public function getDataType()
    {
        return $this->container['dataType'];
    }

    /**
     * Sets dataType
     *
     * @param string|null $dataType dataType
     *
     * @return $this
     */
    public function setDataType($dataType)
    {
        $this->container['dataType'] = $dataType;

        return $this;
    }

    /**
     * Gets sectionType
     *
     * @return string|null
     */
    public function getSectionType()
    {
        return $this->container['sectionType'];
    }

    /**
     * Sets sectionType
     *
     * @param string|null $sectionType sectionType
     *
     * @return $this
     */
    public function setSectionType($sectionType)
    {
        $this->container['sectionType'] = $sectionType;

        return $this;
    }

    /**
     * Gets reportType
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['reportType'];
    }

    /**
     * Sets reportType
     *
     * @param string|null $reportType reportType
     *
     * @return $this
     */
    public function setReportType($reportType)
    {
        $this->container['reportType'] = $reportType;

        return $this;
    }

    /**
     * Gets yop
     *
     * @return string|null
     */
    public function getYop()
    {
        return $this->container['yop'];
    }

    /**
     * Sets yop
     *
     * @param string|null $yop yop
     *
     * @return $this
     */
    public function setYop($yop)
    {
        $this->container['yop'] = $yop;

        return $this;
    }

    /**
     * Gets sessionId
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['sessionId'];
    }

    /**
     * Sets sessionId
     *
     * @param string $sessionId sessionId
     *
     * @return $this
     */
    public function setSessionId($sessionId)
    {
        $this->container['sessionId'] = $sessionId;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


