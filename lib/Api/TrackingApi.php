<?php
/**
 * TrackingApi
 * PHP version 5
 *
 * @category Class
 * @package  Subugoe\CounterClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 5
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0
 */

namespace Subugoe\CounterClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Utils;
use Subugoe\CounterClient\ApiException;
use Subugoe\CounterClient\Configuration;
use Subugoe\CounterClient\HeaderSelector;
use Subugoe\CounterClient\Model\Tracking;
use Subugoe\CounterClient\ObjectSerializer;

/**
 * TrackingApi Class Doc Comment
 *
 * @category Class
 * @package  Subugoe\CounterClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingApi
{
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getTrackingItem
     *
     * Retrieves a Tracking resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Subugoe\CounterClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getTrackingItem(string $id): Tracking
    {
        list($response) = $this->getTrackingItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTrackingItemAsync
     *
     * Retrieves a Tracking resource.
     *
     * @throws \InvalidArgumentException
     */
    public function getTrackingItemAsync(string $id): PromiseInterface
    {
        return $this->getTrackingItemAsyncWithHttpInfo($id)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation getTrackingItemAsyncWithHttpInfo
     *
     * Retrieves a Tracking resource.
     *
     * @throws \InvalidArgumentException
     */
    public function getTrackingItemAsyncWithHttpInfo(string $id): PromiseInterface
    {
        $returnType = Tracking::class;
        $request = $this->getTrackingItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    $responseBody = $response->getBody();
                    if ($returnType === \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getTrackingItemWithHttpInfo
     *
     * Retrieves a Tracking resource.
     *
     * @param  string $id (required)
     *
     * @throws \Subugoe\CounterClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Subugoe\CounterClient\Model\Tracking, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingItemWithHttpInfo(string $id): array
    {
        $request = $this->getTrackingItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() !== null ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() !== null ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($statusCode === 200) {
                if (Tracking::class === \SplFileObject::class) {
                    $content = $responseBody; //stream goes to serializer
                } else {
                    $content = $responseBody->getContents();
                }
                return [
                    ObjectSerializer::deserialize($content, Tracking::class, []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
            }

            $returnType = Tracking::class;
            $responseBody = $response->getBody();
            if ($returnType === \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            if ($e->getCode() === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    Tracking::class,
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }

    /**
     * Operation postTrackingCollection
     *
     * Creates a Tracking resource.
     *
     * @throws \Subugoe\CounterClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function postTrackingCollection(?Tracking $tracking = null): Tracking
    {
        list($response) = $this->postTrackingCollectionWithHttpInfo($tracking);
        return $response;
    }

    /**
     * Operation postTrackingCollectionAsync
     *
     * Creates a Tracking resource.
     *
     * @throws \InvalidArgumentException
     */
    public function postTrackingCollectionAsync(?Tracking $tracking = null): PromiseInterface
    {
        return $this->postTrackingCollectionAsyncWithHttpInfo($tracking)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation postTrackingCollectionAsyncWithHttpInfo
     *
     * Creates a Tracking resource.
     *
     * @param  \Subugoe\CounterClient\Model\Tracking $tracking The new Tracking resource (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function postTrackingCollectionAsyncWithHttpInfo(Tracking $tracking = null): PromiseInterface
    {
        $returnType = Tracking::class;
        $request = $this->postTrackingCollectionRequest($tracking);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    $responseBody = $response->getBody();
                    if ($returnType === \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation postTrackingCollectionWithHttpInfo
     *
     * Creates a Tracking resource.
     *
     * @throws \Subugoe\CounterClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function postTrackingCollectionWithHttpInfo(?Tracking $tracking = null): array
    {
        $request = $this->postTrackingCollectionRequest($tracking);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() !== null ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() !== null ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($statusCode === 201) {
                if (Tracking::class === \SplFileObject::class) {
                    $content = $responseBody; //stream goes to serializer
                } else {
                    $content = $responseBody->getContents();
                }
                return [
                    ObjectSerializer::deserialize($content, Tracking::class, []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
            }

            $returnType = Tracking::class;
            $responseBody = $response->getBody();
            if ($returnType === \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            if ($e->getCode() === 201) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    Tracking::class,
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'ab');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Create request for operation 'getTrackingItem'
     *
     * @throws \InvalidArgumentException
     */
    protected function getTrackingItemRequest(string $id): Request
    {
        $resourcePath = '/api/counter/trackings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{id}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent() !== '') {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query !== '' ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'postTrackingCollection'
     *
     * @param  \Subugoe\CounterClient\Model\Tracking $tracking The new Tracking resource (optional)
     *
     * @throws \InvalidArgumentException
     */
    protected function postTrackingCollectionRequest(Tracking $tracking = null): Request
    {
        $resourcePath = '/api/counter/trackings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($tracking)) {
            $_tempBody = $tracking;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/ld+json', 'application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody =Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent() !== '') {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query !== '' ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}
